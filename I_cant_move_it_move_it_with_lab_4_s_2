#include <iostream>
#include <string>
#include <stdlib.h>

/*Реализуйте шаблонный класс для описания матриц (в частном случае, векторов). Предусмотрите 3 шаблонных параметра: тип элемента, размеры матрицы N и M (N, M <= 3)
	В составе класса должны быть:
1.	Конструктор копирования ++++++++++
2.	Оператор присваивания копированием ++++++
3.	Оператор ввода и вывода +++++++++++++++++++++
4.	Операторы +, +=, *, *=
5.	Оператор ++, который увеличивает все элементы матрицы на 1
6.	Метод вычисления определителя
7.	Метод или оператор для получения и изменения элемента матрицы по индексу
*/

enum class Errors
{
	SIZE_ERROR,
	ENTER_ERROR
};

template <typename m_type>

class Matrix
{
private:
	int m_line = 1;
	int m_column = 1;
	m_type m_mas_matrix[3][3] = {};
	

	template <typename m_type>
	friend std::ostream& operator<< (std::ostream& out, const Matrix <m_type>& x);
	template <typename m_type>
	friend std::istream& operator>> (std::istream& in, Matrix<m_type>& p);
public:
	Matrix(int lines, int columns)
	{
		m_line = lines;
		m_column = columns;
	};

	Matrix(int lines, int columns, m_type* massy)
	{
		m_line = lines;
		m_column = columns;
		m_mas_matrix = massy;
	}

	/// rull of 3
	template <typename m_type>
	Matrix(const Matrix& other) : Matrix(other.m_line, other.m_column, other.m_mas_matrix) { std::cout << "Copy Constuctor!" << std::endl; }; //copy constr (!) + delig constr 

	Matrix& operator= (const Matrix other) // copy assigment operator
	{
		Matrix temp = other;
		std::swap(this->m_line, temp.m_line);
		std::swap(this->m_column, temp.m_column);
		for (int x = 0; x < this->m_line; x++)
		{
			for (int y = 0; y < this->m_column; y++)
			{
				std::swap(this->m_mas_matrix[x][y], temp.m_mas_matrix[x][y]);
			}
		}
		return *this;
	};

	// 

	~Matrix() // destructor
	{
		std::cout << "Destructor!" << std::endl;
	}

	///
	Matrix& operator += (const Matrix& other)
	{
		if ((this->m_line != other.m_line) | (this->m_column != other.m_column))
		{ std::cout << "SIZE_ERROR" << std::endl;
		return *this;
		};

		for(int x = 0; x<this->m_line; x++)
		{
			for (int y = 0; y < this->m_column; y++)
			{
				this->m_mas_matrix[x][y] += other.m_mas_matrix[x][y];
			}
		}
		return *this;
	}

	Matrix operator + (Matrix other)
	{
		Matrix copy_temp2 = other;
		Matrix copy_temp1 = *this;
		copy_temp1 += copy_temp2;
		return copy_temp1;
	}

	Matrix& operator *= (const Matrix& other)
	{
		if ((this->m_column != other.m_line))
		{
			std::cout << "SIZE_ERROR" << std::endl;
			return *this;
		};
		int diff_l = 0;
		int diff_c = 0;

		if (this->m_line != other.m_column)
		{
			diff_l = this->m_line;
			diff_c = other.m_column;
		}

		if (this->m_column != other.m_line)
		{
			diff_l = this->m_column;
			diff_c = other.m_line;
		}

		Matrix temp = *this;

		this->m_line = diff_l;
		this->m_column = diff_c;

		for (int x = 0; x < this->m_line; x++)
		{
			for (int y = 0; y < this->m_column; y++)
			{
				this->m_mas_matrix[x][y] = 0;

				for (int i = 0; i < this->m_line; i++)
				{
					for (int j = 0; j < temp.m_column; j++)
					{
						this->m_mas_matrix[x][y] += temp.m_mas_matrix[x][j] * other.m_mas_matrix[i][y];
					}
				}	
			}
		}
		return *this;
	}

	



















	/// 
	
    void SetMatrix ()
	{
		for (int i = 0; i < m_line; i++)
		{
			for (int j = 0; j < m_column; j++)
			{
				std::cin >> m_mas_matrix[i][j];
			}
		}
	}
	void ShowMatrix()
	{
		for (int i = 0; i < m_line; i++)
		{
			for (int j = 0; j < m_column; j++)
			{
				std::cout << ' ' << m_mas_matrix[i][j] << ' ';
			}
			std::cout << std::endl;
		}
	}



};

template <typename m_type>
std::ostream& operator<< (std::ostream& out, const Matrix<m_type>& p)
{
	for (int i = 0; i < p.m_line; i++)
	{
		for (int j = 0; j < p.m_column; j++)
		{
			out << ' ' << p.m_mas_matrix[i][j] << ' ';
		}
		out << std::endl;
	}
	return out;
};

template <typename m_type>
std::istream& operator>> (std::istream& in, Matrix<m_type>& p)
{
	for (int i = 0; i < p.m_line; i++)
	{
		for (int j = 0; j < p.m_column; j++)
		{
			in >> p.m_mas_matrix[i][j];
		}
	}

	return in;
};

int main()
{
	//инициализация, вывод в поток и +=
	Matrix<int> non(3, 2);
	Matrix<int> nan(2, 3);
	std::cin >> non;
	std::cin >> nan;
	Matrix<int> nun = non;
	std::cout << " Do preobrazovaniy:" << std::endl;
	std::cout << non;
	std::cout << std::endl;
	std::cout << nan;
	nun *= nan;
	std::cout << " Posle preobrazovaniy:" << std::endl;
	std::cout << non;
	std::cout << std::endl;
	std::cout << nan;
	std::cout << std::endl;
	std::cout << nun;
	//

}
